name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.1"
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pre-commit
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Lint
        run: pre-commit run --all-files --show-diff-on-failure

  test:
    name: ${{ matrix.tests }} tests
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            browser: firefox
            tests: End to end
          - runs-on: ubuntu-latest
            browser: chrome
            tests: End to end
          - runs-on: macos-latest
            browser: chrome
            tests: End to end
          - runs-on: windows-latest
            browser: firefox
            tests: End to end
          - runs-on: windows-latest
            browser: chrome
            tests: End to end
          - runs-on: ubuntu-latest
            tests: Unit
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          targets: wasm32-unknown-unknown
          profile: minimal
      - name: Install cargo binstall
        uses: cargo-bins/cargo-binstall@main
        if: ${{ matrix.tests == 'End to end' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install wasm-pack
        if: ${{ matrix.tests == 'End to end' }}
        run: cargo binstall -y wasm-pack
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.tests }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Run end to end tests
        if: ${{ matrix.tests == 'End to end' }}
        run: |
          cd end2end
          wasm-pack test --headless --${{ matrix.browser }}
      - name: Run unit tests
        if: ${{ matrix.tests == 'Unit' }}
        run: cargo test

  build-example:
    name: Build example
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - csr-minimal
          - csr-complete
          - ssr-hydrate-actix
          - ssr-hydrate-axum
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          targets: wasm32-unknown-unknown
          profile: minimal
      - name: Install cargo binstall
        uses: cargo-bins/cargo-binstall@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install trunk
        if: ${{ startsWith(matrix.example, 'csr') }}
        run: cargo binstall -y trunk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install cargo-leptos
        if: ${{ startsWith(matrix.example, 'ssr') }}
        run: cargo binstall -y cargo-leptos
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.example }}-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Build with trunk
        if: ${{ startsWith(matrix.example, 'csr') }}
        run: |
          cd examples/${{ matrix.example }}
          trunk build --release
      - name: Build with cargo-leptos
        if: ${{ startsWith(matrix.example, 'ssr') }}
        run: |
          cd examples/${{ matrix.example }}
          cargo leptos build --release

  test-release-leptos-fluent-macros:
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    needs:
      - lint
      - test
      - build-example
    name: Test leptos-fluent-macros release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
      - name: Publish
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish -v --dry-run -p leptos-fluent-macros

  release-leptos-fluent-macros:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release leptos-fluent-macros
    needs:
      - test-release-leptos-fluent-macros
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
      - name: Publish
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish -v -p leptos-fluent-macros

  release-leptos-fluent:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release leptos-fluent
    needs:
      - release-leptos-fluent-macros
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
      - name: Update version
        run: |
          version=$(grep -oP --color=never '^version = "\K[^"]+' leptos-fluent/Cargo.toml)
          sed -i "s/^leptos-fluent-macros = .*/leptos-fluent-macros = \"$version\"/" leptos-fluent/Cargo.toml
      - name: Publish
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish --allow-dirty -v -p leptos-fluent

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Create release
    needs:
      - release-leptos-fluent
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tag metadata
        id: tag
        run: |
          TAG_TITLE=${GITHUB_REF#refs/*/}
          echo "title=$TAG_TITLE" >> $GITHUB_OUTPUT
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ steps.tag.outputs.title }}
          tag_name: ${{ steps.tag.outputs.title }}
          body: |
            See [CHANGELOG](https://github.com/mondeja/leptos-fluent/blob/master/CHANGELOG.md).
          draft: false
          prerelease: false
